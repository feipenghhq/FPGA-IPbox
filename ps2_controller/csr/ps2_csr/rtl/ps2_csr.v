///////////////////////////////////////////////////////////////
//
// Generated by Simple CSR Generator
//
// Name: ps2_csr.v
// Date Created: 11/1/2020 - 18:4
//
// Description:
//  CSR module for ps2
//
///////////////////////////////////////////////////////////////


module ps2_csr
(
  input            clk,
  input            reset,
  input  [2:0]     i_sw_address,
  input            i_sw_read,
  input            i_sw_write,
  input            i_sw_select,
  /* verilator lint_off UNUSED */
  input  [31:0]    i_sw_wrdata,
  /* verilator lint_on UNUSED */
  output [31:0]    o_sw_rddata,
  output           o_hw_data_tx_fifo_fifo_write,
  output [7:0]     o_hw_data_tx_fifo_fifo_write_data,
  output           o_hw_data_rx_fifo_fifo_read,
  input  [7:0]     i_hw_data_rx_fifo_fifo_read_data,
  input            i_hw_status_tx_fifo_full,
  input            i_hw_status_rx_fifo_empty
);


  // register definition
  reg    [31:0]    o_sw_rddata_q;
  reg              i_hw_status_tx_fifo_full_q;
  reg              i_hw_status_rx_fifo_empty_q;

  // reg type variable definition
  reg    [31:0]    o_sw_rddata_next;


  //==============================
  // HW Read output
  //==============================

  assign o_sw_rddata = o_sw_rddata_q;


  //==============================
  // Software Read Logic
  //==============================

  always @(posedge clk) begin
    if (i_sw_read) o_sw_rddata_q <= o_sw_rddata_next;
  end

  // read decode logic
  always @(*) begin
    o_sw_rddata_next = o_sw_rddata;
    case(i_sw_address)
      3'h0:  o_sw_rddata_next = {16'b0, i_hw_data_rx_fifo_fifo_read_data, 8'h0};
      3'h4:  o_sw_rddata_next = {30'b0, i_hw_status_rx_fifo_empty_q, i_hw_status_tx_fifo_full_q};
      default:  o_sw_rddata_next = o_sw_rddata;
    endcase
  end



  //==============================
  // Software/Hardware Write Logic
  //==============================

  // software write decode Logic
  always @(*) begin
    case(i_sw_address)
      3'h4: begin
      end
      default: begin
      end
    endcase
  end


  // write sequential Logic
  // Software/Hardware Write Logic
  always @(posedge clk) begin
    if (reset) begin
      i_hw_status_tx_fifo_full_q <= 1'h0;
      i_hw_status_rx_fifo_empty_q <= 1'h1;
    end
    else begin
      // Register: status | Field: i_hw_status_tx_fifo_full
      i_hw_status_tx_fifo_full_q <= i_hw_status_tx_fifo_full;

      // Register: status | Field: i_hw_status_rx_fifo_empty
      i_hw_status_rx_fifo_empty_q <= i_hw_status_rx_fifo_empty;

    end
  end

  //==============================
  // FIFO control
  //==============================

  // FIFO Read logic
  assign o_hw_data_rx_fifo_fifo_read = i_sw_select & i_sw_read & (i_sw_address == 3'h0);

  // FIFO Write logic
  assign o_hw_data_tx_fifo_fifo_write = i_sw_select & i_sw_write & (i_sw_address == 3'h0);
  assign o_hw_data_tx_fifo_fifo_write_data = i_sw_wrdata[7:0];


endmodule
